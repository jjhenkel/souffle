# Souffle - A Datalog Compiler
# Copyright (c) 2013, Oracle and/or its affiliates. All rights reserved.
# Licensed under the Universal Permissive License v 1.0 as shown at:
# - https://opensource.org/licenses/UPL
# - <souffle root>/licenses/SOUFFLE-UPL.txt

dnl Group test for all provenance flag configurations
dnl $1 -- directory of testcase
dnl $2 -- test category
dnl $3 -- command to execute testcase
m4_define([TEST_PROV_GROUP],[
  m4_foreach([FLAGS],[PROV_FLAGS],[
    AT_SETUP([$1 FLAGS])
    $2
    AT_CLEANUP([])
  ])
])

dnl Execute a positive provenance test case for a given flag configuration
dnl $1 -- test case
dnl $2 -- category
dnl $3 -- facts directory relative to the test directory
dnl $4 -- directory with expected output
dnl       (relative to the test dir, but starting with '/'), or empty string
m4_define([TEST_PROV],[
  m4_define([TESTNAME],[$1])
  m4_define([CATEGORY],[$2])
  m4_define([TESTDIR],["$TESTS"/CATEGORY/TESTNAME])
  m4_define([PROGRAM],[TESTDIR/TESTNAME.dl])
  m4_define([FACTS],[TESTDIR/$3])
  m4_define([EXPECTEDDIR], [TESTDIR$4])
  # invoke souffle
  AT_CHECK(["$SOUFFLE" FLAGS -D. -F FACTS PROGRAM 0<TESTDIR/TESTNAME.in 1>TESTNAME.out 2>TESTNAME.err], [0])
  SORTED_SAME_FILES([*.csv],[EXPECTEDDIR])

  # provenance output generates a `.' after the final tuple
  # since tuple output is non-deterministic, this `.' should be decoupled from the tuple
  sed 's/\.$/\
./' TESTNAME.out | sort > TESTNAME.out.generated
  sed 's/\.$/\
./' EXPECTEDDIR/TESTNAME.out | sort > TESTNAME.out.expected
  SAME_FILE([TESTNAME.out.generated],[TESTNAME.out.expected])

  # validate whether the number of generated CSV files
  # is equal to the number of expected CSV files.
  ls *.csv|wc -l >"num.generated"
  ls EXPECTEDDIR/*.csv|wc -l >"num.expected"

  SAME_FILE([TESTNAME.err],[EXPECTEDDIR/TESTNAME.err])
  SAME_FILE([num.generated],[num.expected])
])

dnl Positive testcase for Souffle provenance explainer
dnl $1 -- test name
dnl $2 -- category
m4_define([POSITIVE_PROVENANCE_TEST],[
  m4_ifblank(m4_join([],ENV_CONFS), [
    m4_define([PROV_FLAGS], [[-j8], [-c -j8]])
  ], [
    m4_define([PROV_FLAGS], [ENV_CONFS])
  ])
  TEST_PROV_GROUP([$1],[
    TEST_PROV([$1],[$2], facts)
  ])
])

dnl Positive testcase for Souffle provenance explainer's output file option
dnl $1 -- test name
dnl $2 -- category
m4_define([POSITIVE_PROVENANCE_OUTPUT_TEST],[
  m4_ifblank(m4_join([],ENV_CONFS), [
    m4_define([PROV_FLAGS], [[-j8], [-c -j8]])
  ], [
    m4_define([PROV_FLAGS], [ENV_CONFS])
  ])
  TEST_PROV_GROUP([$1],[
    TEST_EVAL_IN([$1],[$2], facts)
    dnl Check for output files generated by output command in provenance
    SAME_FILE([provenance.txt],[EXPECTEDDIR/provenance.txt])
  ])
])

##########################################################################

POSITIVE_PROVENANCE_TEST([components],[provenance])
POSITIVE_PROVENANCE_TEST([constraints],[provenance])
POSITIVE_PROVENANCE_TEST([cprog1],[provenance])
POSITIVE_PROVENANCE_TEST([eqrel_tests3],[provenance])
POSITIVE_PROVENANCE_TEST([explain_float_unsigned],[provenance])
POSITIVE_PROVENANCE_TEST([high_arity],[provenance])
POSITIVE_PROVENANCE_TEST([negation],[provenance])
POSITIVE_PROVENANCE_TEST([path],[provenance])
POSITIVE_PROVENANCE_TEST([path_explain_negation],[provenance])
POSITIVE_PROVENANCE_OUTPUT_TEST([path_explain_output],[provenance])
POSITIVE_PROVENANCE_TEST([same_gen],[provenance])
POSITIVE_PROVENANCE_TEST([query_1],[provenance])
POSITIVE_PROVENANCE_TEST([query_2],[provenance])
POSITIVE_PROVENANCE_TEST([query_3],[provenance])
POSITIVE_PROVENANCE_TEST([query_float_unsigned],[provenance])
